-- Реализовать блок арбитража.
-- Количество устройств в блоке аритража задается параметрически и должно иметь свой приоритет.
-- Если для нескольких устройств задан одинаковый уровень приоритета, то внутри такой группы используется алгоритм динамических циклических приоритетов.
library ieee;
use ieee.std_logic_1164.all;
use work.my_package.all;

entity arbitration is
	generic (
		N : integer;
		priorities : integer_vector
	);
	port (
		reset			:	in		std_logic;
		clk			:	in		std_logic;
		request			:	in		std_logic_vector(N-1 downto 0);
		reply			:	out		std_logic_vector(N-1 downto 0)
	);
end arbitration;

architecture a_arbitration of arbitration is
	signal outputs : integer_vector (N-1 downto 0);
begin

	p_work : process(reset, clk)

		variable curr_p : integer;
		variable save_p : integer;
		variable prev_p : integer;
		variable savePos_p : integer;

	begin

		if (reset = '1') then
			
			curr_p := N-1;
			while curr_p >= 0 loop
				
				outputs(curr_p) <= curr_p;
				reply(curr_p) <= '0';
				
				curr_p := curr_p - 1;
				
			end loop;

		elsif (clk'event and clk = '1') then

			save_p := -1;
			savePos_p := -1;
			
			curr_p := N-1;
			while curr_p >= 0 loop
			
				if (request(curr_p) = '1' and (priorities(curr_p) > save_p)) then

						savePos_p := curr_p;
						save_p := priorities(curr_p);

				end if;

				curr_p := curr_p - 1;

			end loop;

			if(save_p /= -1) then
			
				prev_p := savePos_p;

				curr_p := savePos_p - 1;
				while curr_p >= 0 loop

			if (request(curr_p) = '1' and priorities(curr_p) = priorities(prev_p)) then

							save_p := outputs(prev_p);
							outputs(prev_p) <= outputs(curr_p);
							outputs(curr_p) <= save_p;
							prev_p := curr_p;

					end if;

					curr_p := curr_p - 1;

				end loop;
					
				reply <= (others => '0');
				reply(outputs(prev_p)) <= '1';

			end if;

		end if;

	end process p_work;
	
end architecture a_arbitration;
