-- Вычислительная система состоит из ЦПУ (включает в себя компоненты АЛУ и блок управления памятью), компонента памяти и управления/
-- АЛУ состоит из компонент сумматора, вычитателя, умножителя и инвертора.
-- Блок управления памятью принимает от процессора команды на чтение или запись и значения, и далее этот блок записывает или считывает команды из блока памяти.
-- Команды 32-битные: код команды (5 бит), адрес первого операнда (9 бит), адрес второго операнда (9 бит), адрес результата (9 бит). Команды записаны в cmd_file.txt
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use std.textio.all;
use work.my_package.all;

-------------------------------------------

entity evm_tb is
end evm_tb;

architecture behav_evm_tb of evm_tb is 
	
	component memory is
		generic(
			AMOUNT_INTERFACE: natural
		);
		port(
			reset:		in	std_logic;
			clk:		in	std_logic;
			addr:		in	address_t(AMOUNT_INTERFACE-1 downto 0);
			addr_st:	in	std_logic_vector(AMOUNT_INTERFACE-1 downto 0);
			dir:		in	std_logic_vector(AMOUNT_INTERFACE-1 downto 0);
			data_in:	in	word_t(AMOUNT_INTERFACE-1 downto 0);
			data_st:	in	std_logic_vector(AMOUNT_INTERFACE-1 downto 0);
			data_ready:	in	std_logic_vector(AMOUNT_INTERFACE-1 downto 0);
			addr_save:	out	std_logic_vector(AMOUNT_INTERFACE-1 downto 0);
			data_save:	out	std_logic_vector(AMOUNT_INTERFACE-1 downto 0);
			data_out:	out	word_t(AMOUNT_INTERFACE-1 downto 0);
			data_end:	out	std_logic_vector(AMOUNT_INTERFACE-1 downto 0)
		);
	end component;
	
	component cpu is
		generic(
			ADDR_START : std_logic_vector(ADDRESS_SIZE-1 downto 0)
		);
		port(
		
			clk:		in	std_logic;
			reset:		in	std_logic;
			reply: 		in	std_logic;
			request: 	out	std_logic;
			pause: 		out	std_logic;
			
			mem_address:	out	std_logic_vector(ADDRESS_SIZE-1 downto 0);
			mem_addr_st:	out	std_logic;
			mem_dir:	out	std_logic;
			mem_data_in:	out	std_logic_vector(SIZE-1 downto 0);
			mem_data_st:	out	std_logic;
			mem_data_ready:	out	std_logic;
			mem_addr_save:	in	std_logic;
			mem_data_save:	in	std_logic;
			mem_data_out:	in	std_logic_vector(SIZE-1 downto 0);
			mem_data_end:	in	std_logic
			
		);
	end component;
	
	component arbitration is
		generic (
			AMOUNT_INTERFACE: integer;
			PRIORITIES: integer_vector
		);
		port(
			clk:		in	std_logic;
			reset:		in	std_logic;
			enable:		in	std_logic;
			request:	in	std_logic_vector(AMOUNT_INTERFACE-1 downto 0);
			reply:		out	std_logic_vector(AMOUNT_INTERFACE-1 downto 0)
		);
	end component;
	
	component mem_control is
	port(
	
		clk:		in	std_logic;
		reset:		in	std_logic;
		start:		in	std_logic;
		address:	in	std_logic_vector(ADDRESS_SIZE-1 downto 0);
		data_in:	in 	std_logic_vector(SIZE-1 downto 0);
		dir:		in	std_logic;
		data_out:	out	std_logic_vector(SIZE-1 downto 0);
		finish:		out	std_logic;
		
		mem_address:	out	std_logic_vector(ADDRESS_SIZE-1 downto 0);
		mem_addr_st:	out	std_logic;
		mem_dir:	out	std_logic;
		mem_data_in:	out	std_logic_vector(SIZE-1 downto 0);
		mem_data_st:	out	std_logic;
		mem_data_ready:	out	std_logic;
		mem_addr_save:	in	std_logic;
		mem_data_save:	in	std_logic;
		mem_data_out:	in	std_logic_vector(SIZE-1 downto 0);
		mem_data_end:	in	std_logic
		
	);
	end component;
	
	constant MY_CPU_AMOUNT: natural := 2;
	constant MY_AMOUNT_INTERFACE: natural := MY_CPU_AMOUNT + 1;
	constant MY_ADDR_START: address_t(MY_CPU_AMOUNT-1 downto 0) := (
		std_logic_vector(to_unsigned(4, ADDRESS_SIZE)),
		std_logic_vector(to_unsigned(7, ADDRESS_SIZE))
	);
	constant MY_PRIORITIES: integer_vector(MY_CPU_AMOUNT-1 downto 0) := (8, 5);
	
	signal my_clk: 		std_logic := '0';
	signal my_mem_reset: 	std_logic := '1';
	signal my_reset: 	std_logic := '1';
	signal my_addr: 	address_t(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_addr_st: 	std_logic_vector(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_dir: 		std_logic_vector(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_data_in: 	word_t(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_data_st: 	std_logic_vector(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_data_ready: 	std_logic_vector(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_addr_save: 	std_logic_vector(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_data_save: 	std_logic_vector(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_data_out: 	word_t(MY_AMOUNT_INTERFACE-1 downto 0);
	signal my_data_end: 	std_logic_vector(MY_AMOUNT_INTERFACE-1 downto 0);
	
	
	signal my_request: 	std_logic_vector(MY_CPU_AMOUNT-1 downto 0);
	signal my_reply: 	std_logic_vector(MY_CPU_AMOUNT-1 downto 0);
	signal my_pause: 	std_logic_vector(MY_CPU_AMOUNT-1 downto 0);
	
	signal cpu_pause: 	std_logic;
	signal arb_enable: 	std_logic;
	
	signal start: 		std_logic := '0';
	signal command: 	std_logic_vector(SIZE-1 downto 0) := (others => '0');
	signal address: 	std_logic_vector(ADDRESS_SIZE-1 downto 0) := (others => '1');
	signal finish: 		std_logic;
	
	type state_t is (READ_LINE, WRITE_LINE, RUN);
	
	signal state: 		state_t := READ_LINE;
	
begin
	
	cpu_pause <= my_pause(0) or my_pause(1);
	arb_enable <= not cpu_pause;
	
	my_mem_reset <= '0' after 10 fs;
	
	p_clk : process begin
	
		loop
			wait for 20 fs;
			my_clk <= not my_clk;
		end loop;
		
	end process p_clk;
	
	memory_1 : memory generic map(AMOUNT_INTERFACE => MY_AMOUNT_INTERFACE)

	port map(	
		clk		=> my_clk,
		reset		=> my_mem_reset,
		addr		=> my_addr,
		addr_st		=> my_addr_st,
		dir		=> my_dir,
		data_in		=> my_data_in,
		data_st		=> my_data_st,
		data_ready	=> my_data_ready,
		addr_save	=> my_addr_save,
		data_save	=> my_data_save,
		data_out	=> my_data_out,
		data_end	=> my_data_end		
	);
	
	arb_1 : arbitration generic map(
	
		AMOUNT_INTERFACE	=> MY_CPU_AMOUNT,
		PRIORITIES		=> MY_PRIORITIES
		
	)
	port map(	
		reset	=> my_reset,
		enable	=> arb_enable,
		clk	=> my_clk,
		request	=> my_request,
		reply	=> my_reply
	);
	
	mem_control_1 : mem_control port map(
	
		clk 		=> my_clk,
		reset		=> my_mem_reset,
		start 		=> start,
		address 	=> address,
		data_in 	=> command,
		dir 		=> '0',
		finish 		=> finish,
			
		mem_address	=> my_addr(MY_AMOUNT_INTERFACE-1),
		mem_addr_st	=> my_addr_st(MY_AMOUNT_INTERFACE-1),
		mem_dir		=> my_dir(MY_AMOUNT_INTERFACE-1),
		mem_data_in	=> my_data_in(MY_AMOUNT_INTERFACE-1),
		mem_data_st	=> my_data_st(MY_AMOUNT_INTERFACE-1),
		mem_data_ready	=> my_data_ready(MY_AMOUNT_INTERFACE-1),
		mem_addr_save	=> my_addr_save(MY_AMOUNT_INTERFACE-1),
		mem_data_save	=> my_data_save(MY_AMOUNT_INTERFACE-1),
		mem_data_out	=> my_data_out(MY_AMOUNT_INTERFACE-1),
		mem_data_end	=> my_data_end(MY_AMOUNT_INTERFACE-1)
		
	);
	
	cpu_generate: for i in MY_CPU_AMOUNT-1 downto 0 generate
	
		cpu_1 : cpu generic map(ADDR_START => MY_ADDR_START(i))

		port map(		
			clk		=> my_clk,
			reset		=> my_reset,
			reply		=> my_reply(i),
			request		=> my_request(i),
			pause		=> my_pause(i),
			
			mem_address	=> my_addr(i),
			mem_addr_st	=> my_addr_st(i),
			mem_dir		=> my_dir(i),
			mem_data_in	=> my_data_in(i),
			mem_data_st	=> my_data_st(i),
			mem_data_ready	=> my_data_ready(i),
			mem_addr_save	=> my_addr_save(i),
			mem_data_save	=> my_data_save(i),
			mem_data_out	=> my_data_out(i),
			mem_data_end	=> my_data_end(i)			
		);
		
	end generate cpu_generate;
	
	main_proc : process(my_clk) 
	-- чтение команд из файла
		file my_file: text open read_mode is "/home/aleksandrova/cmd_file.txt";
		variable my_file_line: line;
		variable my_command: bit_vector(SIZE-1 downto 0);
		variable ok: boolean;
		
	begin
	
		if(my_clk'event and my_clk = '1') then
		
			if(state = READ_LINE) then
			
				if not endfile(my_file) then

					readline(my_file, my_file_line);
					read(my_file_line, my_command, ok);
					
					command <= to_StdLogicVector(my_command);
					address <= std_logic_vector(to_unsigned(to_integer(unsigned(address)) + 1, ADDRESS_SIZE));
					start <= '1';
					
					state <= WRITE_LINE;
					
				else
				
					state <= RUN;
					
				end if;
				
			elsif(state = WRITE_LINE) then
			
				start <= '0';
			
				if(finish = '1') then
				
					state <= READ_LINE;
				
				end if;
				
			elsif(state = RUN) then
			
				my_reset <= '0';
			
			end if;
			
		end if;
	
	end process main_proc;
	
end behav_evm_tb;
