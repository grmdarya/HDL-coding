// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/25/2019 13:22:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    COMPARATOR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module COMPARATOR_vlg_sample_tst(
	A0_A3,
	B0_B3,
	enable,
	reset,
	sampler_tx
);
input [3:0] A0_A3;
input [3:0] B0_B3;
input  enable;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(A0_A3 or B0_B3 or enable or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module COMPARATOR_vlg_check_tst (
	A,
	B,
	C,
	state,
	sampler_rx
);
input  A;
input  B;
input  C;
input [1:0] state;
input sampler_rx;

reg  A_expected;
reg  B_expected;
reg  C_expected;
reg [1:0] state_expected;

reg  A_prev;
reg  B_prev;
reg  C_prev;
reg [1:0] state_prev;

reg  A_expected_prev;
reg  B_expected_prev;
reg  C_expected_prev;
reg [1:0] state_expected_prev;

reg  last_A_exp;
reg  last_B_exp;
reg  last_C_exp;
reg [1:0] last_state_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	C_prev = C;
	state_prev = state;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	C_expected_prev = C_expected;
	state_expected_prev = state_expected;
end



// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected B
initial
begin
	B_expected = 1'bX;
end 

// expected A
initial
begin
	A_expected = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or C_expected or C or state_expected or state)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected C = %b | expected state = %b | ",A_expected_prev,B_expected_prev,C_expected_prev,state_expected_prev);
	$display("| real A = %b | real B = %b | real C = %b | real state = %b | ",A_prev,B_prev,C_prev,state_prev);
`endif
	if (
		( A_expected_prev !== 1'bx ) && ( A_prev !== A_expected_prev )
		&& ((A_expected_prev !== last_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp = A_expected_prev;
	end
	if (
		( B_expected_prev !== 1'bx ) && ( B_prev !== B_expected_prev )
		&& ((B_expected_prev !== last_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp = B_expected_prev;
	end
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module COMPARATOR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A0_A3;
reg [3:0] B0_B3;
reg enable;
reg reset;
// wires                                               
wire A;
wire B;
wire C;
wire [1:0] state;

wire sampler;                             

// assign statements (if any)                          
COMPARATOR i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A0_A3(A0_A3),
	.B(B),
	.B0_B3(B0_B3),
	.C(C),
	.enable(enable),
	.reset(reset),
	.state(state)
);
// A0_A3[ 3 ]
initial
begin
	repeat(2)
	begin
		A0_A3[3] = 1'b0;
		A0_A3[3] = #240000 1'b1;
		# 240000;
	end
	A0_A3[3] = 1'b0;
end 
// A0_A3[ 2 ]
initial
begin
	repeat(4)
	begin
		A0_A3[2] = 1'b0;
		A0_A3[2] = #120000 1'b1;
		# 120000;
	end
	A0_A3[2] = 1'b0;
end 
// A0_A3[ 1 ]
initial
begin
	repeat(8)
	begin
		A0_A3[1] = 1'b0;
		A0_A3[1] = #60000 1'b1;
		# 60000;
	end
	A0_A3[1] = 1'b0;
end 
// A0_A3[ 0 ]
initial
begin
	repeat(16)
	begin
		A0_A3[0] = 1'b0;
		A0_A3[0] = #30000 1'b1;
		# 30000;
	end
	A0_A3[0] = 1'b0;
	A0_A3[0] = #30000 1'b1;
end 
// B0_B3[ 3 ]
initial
begin
	repeat(2)
	begin
		B0_B3[3] = 1'b0;
		B0_B3[3] = #200000 1'b1;
		# 200000;
	end
	B0_B3[3] = 1'b0;
end 
// B0_B3[ 2 ]
always
begin
	B0_B3[2] = 1'b0;
	B0_B3[2] = #100000 1'b1;
	#100000;
end 
// B0_B3[ 1 ]
always
begin
	B0_B3[1] = 1'b0;
	B0_B3[1] = #50000 1'b1;
	#50000;
end 
// B0_B3[ 0 ]
always
begin
	B0_B3[0] = 1'b0;
	B0_B3[0] = #25000 1'b1;
	#25000;
end 

// enable
initial
begin
	enable = 1'b1;
	enable = #830000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #300000 1'b1;
	reset = #140000 1'b0;
end 

COMPARATOR_vlg_sample_tst tb_sample (
	.A0_A3(A0_A3),
	.B0_B3(B0_B3),
	.enable(enable),
	.reset(reset),
	.sampler_tx(sampler)
);

COMPARATOR_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.C(C),
	.state(state),
	.sampler_rx(sampler)
);
endmodule

